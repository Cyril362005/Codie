name: Performance Baseline & Monitoring

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC to track performance trends
    - cron: '0 2 * * *'

jobs:
  frontend-performance:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create reports directory
      run: mkdir -p reports
    
    - name: Run ESLint with reporting
      run: |
        npm run lint:report || true
        echo "ESLint report generated"
      continue-on-error: true
    
    - name: Run tests with coverage
      run: npm run test:coverage
      env:
        CI: true
    
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
    
    - name: Run bundle analysis
      run: |
        ANALYZE=true npm run build
        echo "Bundle analysis completed"
      env:
        NODE_ENV: production
    
    - name: Run Lighthouse CI
      run: npm run lighthouse
      env:
        CI: true
      continue-on-error: true
    
    - name: Run security audit
      run: |
        npm run security:audit || true
        echo "Security audit completed"
      continue-on-error: true
    
    - name: Generate performance summary
      run: |
        echo "# Performance Baseline Report" > reports/performance-summary.md
        echo "Generated on: $(date)" >> reports/performance-summary.md
        echo "" >> reports/performance-summary.md
        
        # Bundle size information
        if [ -f "dist/assets" ]; then
          echo "## Bundle Size" >> reports/performance-summary.md
          find dist/assets -name "*.js" -exec ls -lh {} \; | awk '{print "- " $9 ": " $5}' >> reports/performance-summary.md
          echo "" >> reports/performance-summary.md
        fi
        
        # Test coverage summary
        if [ -f "reports/coverage/coverage-summary.json" ]; then
          echo "## Test Coverage" >> reports/performance-summary.md
          node -e "
            const coverage = require('./reports/coverage/coverage-summary.json');
            const total = coverage.total;
            console.log(\`- Lines: \${total.lines.pct}%\`);
            console.log(\`- Functions: \${total.functions.pct}%\`);
            console.log(\`- Branches: \${total.branches.pct}%\`);
            console.log(\`- Statements: \${total.statements.pct}%\`);
          " >> reports/performance-summary.md
          echo "" >> reports/performance-summary.md
        fi
        
        # Lighthouse summary
        if [ -d "reports/lighthouse" ]; then
          echo "## Lighthouse Scores" >> reports/performance-summary.md
          echo "Lighthouse audit completed - check artifacts for detailed results" >> reports/performance-summary.md
          echo "" >> reports/performance-summary.md
        fi
        
        cat reports/performance-summary.md
    
    - name: Upload performance artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-performance-reports-${{ github.run_number }}
        path: |
          reports/
          dist/
        retention-days: 30
    
    - name: Comment PR with performance summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('reports/performance-summary.md')) {
            const summary = fs.readFileSync('reports/performance-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }

  backend-performance:
    runs-on: ubuntu-latest
    # Backend performance testing for Codie microservices
    if: true  # Backend is implemented
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-benchmark pytest-cov memory-profiler bandit safety
        # Add your backend requirements here
        # pip install -r requirements.txt
    
    - name: Create reports directory
      run: mkdir -p reports
    
    - name: Run pytest with coverage and benchmarks
      run: |
        pytest --cov=. --cov-report=json:reports/python-coverage.json \
               --cov-report=html:reports/python-coverage \
               --benchmark-json=reports/benchmark-results.json \
               --benchmark-only
      continue-on-error: true
    
    - name: Run memory profiler
      run: |
        # Example memory profiling - adjust for your backend code
        python -m memory_profiler your_main_module.py > reports/memory-profile.txt
      continue-on-error: true
    
    - name: Run security analysis
      run: |
        bandit -r . -f json -o reports/bandit-security.json || true
        safety check --json --output reports/safety-security.json || true
      continue-on-error: true
    
    - name: Upload backend performance artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-performance-reports-${{ github.run_number }}
        path: reports/
        retention-days: 30

  performance-comparison:
    runs-on: ubuntu-latest
    needs: [frontend-performance]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download current artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-performance-reports-${{ github.run_number }}
        path: ./current-reports/
    
    - name: Compare with main branch baseline
      run: |
        echo "# Performance Comparison Report" > comparison-report.md
        echo "Comparing performance metrics between current PR and main branch" >> comparison-report.md
        echo "" >> comparison-report.md
        
        # This is a placeholder for actual comparison logic
        # You would implement actual comparison logic here based on your needs
        
        echo "## Bundle Size Comparison" >> comparison-report.md
        echo "- Current bundle analysis available in artifacts" >> comparison-report.md
        echo "- Implement delta comparison when baseline is established" >> comparison-report.md
        echo "" >> comparison-report.md
        
        echo "## Coverage Comparison" >> comparison-report.md
        echo "- Current coverage metrics available in artifacts" >> comparison-report.md
        echo "- Implement coverage delta when baseline is established" >> comparison-report.md
        
    - name: Comment comparison results
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('comparison-report.md')) {
            const comparison = fs.readFileSync('comparison-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comparison
            });
          }
