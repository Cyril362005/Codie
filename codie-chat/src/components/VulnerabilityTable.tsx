import React, { useState, useMemo } from 'react';

type Severity = 'High' | 'Medium' | 'Low';
type Status = 'Open' | 'In Progress' | 'Resolved';

interface Vulnerability {
  id: string;
  severity: Severity;
  description: string;
  status: Status;
}

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
}

const VulnerabilityTable: React.FC<VulnerabilityTableProps> = ({ vulnerabilities: initialVulnerabilities }) => {
  const [vulnerabilities, setVulnerabilities] = useState(initialVulnerabilities);
  const [sortConfig, setSortConfig] = useState<{ key: keyof Vulnerability; direction: 'ascending' | 'descending' } | null>(null);
  const [filter, setFilter] = useState('');

  const sortedVulnerabilities = useMemo(() => {
    const sortableItems = [...vulnerabilities];
    if (sortConfig !== null) {
      sortableItems.sort((a, b) => {
        if (a[sortConfig.key] < b[sortConfig.key]) {
          return sortConfig.direction === 'ascending' ? -1 : 1;
        }
        if (a[sortConfig.key] > b[sortConfig.key]) {
          return sortConfig.direction === 'ascending' ? 1 : -1;
        }
        return 0;
      });
    }
    return sortableItems;
  }, [vulnerabilities, sortConfig]);

  const filteredVulnerabilities = sortedVulnerabilities.filter(vuln =>
    vuln.description.toLowerCase().includes(filter.toLowerCase()) ||
    vuln.id.toLowerCase().includes(filter.toLowerCase())
  );

  const requestSort = (key: keyof Vulnerability) => {
    let direction: 'ascending' | 'descending' = 'ascending';
    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  return (
    <div className="glass-1 p-lg">
      <div className="flex justify-between items-center mb-md">
        <h3 className="h3 text-white">Vulnerabilities</h3>
        <input
          type="text"
          placeholder="Filter vulnerabilities..."
          className="bg-white/10 text-white px-md py-sm rounded-md focus:outline-none focus:ring-2 focus:ring-accent"
          onChange={(e) => setFilter(e.target.value)}
        />
      </div>
      <table className="w-full text-left">
        <thead>
          <tr className="border-b border-white/10">
            <th className="p-md cursor-pointer" onClick={() => requestSort('id')}>ID</th>
            <th className="p-md cursor-pointer" onClick={() => requestSort('severity')}>Severity</th>
            <th className="p-md">Description</th>
            <th className="p-md cursor-pointer" onClick={() => requestSort('status')}>Status</th>
          </tr>
        </thead>
        <tbody>
          {filteredVulnerabilities.map((vuln) => (
            <tr key={vuln.id} className="border-b border-white/5 hover:bg-white/5">
              <td className="p-md font-mono text-sm">{vuln.id}</td>
              <td className="p-md">
                <span className={`px-sm py-xs rounded-full text-xs font-semibold ${
                  vuln.severity === 'High' ? 'bg-danger/20 text-danger' :
                  vuln.severity === 'Medium' ? 'bg-warning/20 text-warning' :
                  'bg-success/20 text-success'
                }`}>
                  {vuln.severity}
                </span>
              </td>
              <td className="p-md">{vuln.description}</td>
              <td className="p-md">
                <select
                  value={vuln.status}
                  onChange={(e) => {
                    const newStatus = e.target.value as Status;
                    setVulnerabilities(vulnerabilities.map(v => v.id === vuln.id ? { ...v, status: newStatus } : v));
                  }}
                  className="bg-white/10 text-white p-sm rounded-md focus:outline-none focus:ring-2 focus:ring-accent"
                >
                  <option>Open</option>
                  <option>In Progress</option>
                  <option>Resolved</option>
                </select>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default VulnerabilityTable;
