import React, { useState, useMemo } from 'react';

interface Vulnerability {
  title: string;
  severity: string;
  file_path: string;
  line_number?: number;
  description?: string;
  cvss_score?: number;
  cve_url?: string;
}

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
}

const VulnerabilityTable: React.FC<VulnerabilityTableProps> = ({ vulnerabilities }) => {
  const [sortConfig, setSortConfig] = useState<{ key: keyof Vulnerability; direction: 'ascending' | 'descending' } | null>(null);
  const [filter, setFilter] = useState('');

  const sortedVulnerabilities = useMemo(() => {
    const sortableItems = [...vulnerabilities];
    if (sortConfig !== null) {
      sortableItems.sort((a, b) => {
        const aValue = a[sortConfig.key];
        const bValue = b[sortConfig.key];
        if (aValue && bValue && aValue < bValue) {
          return sortConfig.direction === 'ascending' ? -1 : 1;
        }
        if (aValue && bValue && aValue > bValue) {
          return sortConfig.direction === 'ascending' ? 1 : -1;
        }
        return 0;
      });
    }
    return sortableItems;
  }, [vulnerabilities, sortConfig]);

  const filteredVulnerabilities = sortedVulnerabilities.filter(vuln =>
    vuln.title.toLowerCase().includes(filter.toLowerCase()) ||
    vuln.file_path.toLowerCase().includes(filter.toLowerCase()) ||
    vuln.severity.toLowerCase().includes(filter.toLowerCase())
  );

  const requestSort = (key: keyof Vulnerability) => {
    let direction: 'ascending' | 'descending' = 'ascending';
    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Vulnerabilities</h3>
        <input
          type="text"
          placeholder="Filter vulnerabilities..."
          className="px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
          onChange={(e) => setFilter(e.target.value)}
        />
      </div>
      <table className="w-full text-left">
        <thead>
          <tr className="border-b border-gray-200 dark:border-gray-700">
            <th className="p-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer" onClick={() => requestSort('title')}>Title</th>
            <th className="p-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer" onClick={() => requestSort('severity')}>Severity</th>
            <th className="p-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer" onClick={() => requestSort('file_path')}>File</th>
            <th className="p-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Line</th>
            <th className="p-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">CVSS Score</th>
          </tr>
        </thead>
        <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
          {filteredVulnerabilities.map((vuln, index) => (
            <tr key={index} className="hover:bg-gray-50 dark:hover:bg-gray-700">
              <td className="p-3 text-sm font-medium text-gray-900 dark:text-white">{vuln.title}</td>
              <td className="p-3">
                <span className={`px-2 py-1 rounded-full text-xs font-semibold ${
                  vuln.severity === 'critical' ? 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400' :
                  vuln.severity === 'high' ? 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400' :
                  vuln.severity === 'medium' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400' :
                  'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400'
                }`}>
                  {vuln.severity.toUpperCase()}
                </span>
              </td>
              <td className="p-3 text-sm text-gray-500 dark:text-gray-400 font-mono">{vuln.file_path}</td>
              <td className="p-3 text-sm text-gray-500 dark:text-gray-400">{vuln.line_number || '-'}</td>
              <td className="p-3 text-sm text-gray-500 dark:text-gray-400">{vuln.cvss_score ? vuln.cvss_score.toFixed(1) : '-'}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default VulnerabilityTable;
